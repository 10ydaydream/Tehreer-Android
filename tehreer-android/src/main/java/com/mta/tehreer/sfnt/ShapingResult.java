/*
 * Copyright (C) 2016-2023 Muhammad Tayyab Akram
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.mta.tehreer.sfnt;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.mta.tehreer.Disposable;
import com.mta.tehreer.collections.FloatList;
import com.mta.tehreer.collections.IntList;
import com.mta.tehreer.collections.PointList;
import com.mta.tehreer.internal.Constants;
import com.mta.tehreer.internal.JniBridge;
import com.mta.tehreer.internal.Raw;
import com.mta.tehreer.internal.layout.CaretEdgesBuilder;

import static com.mta.tehreer.internal.util.Preconditions.checkArrayBounds;
import static com.mta.tehreer.internal.util.Preconditions.checkElementIndex;
import static com.mta.tehreer.internal.util.Preconditions.checkIndexRange;
import static com.mta.tehreer.internal.util.Preconditions.checkNotNull;

/**
 * A <code>ShapingResult</code> object is a container for the results of text shaping. It is
 * generated by a <code>ShapingEngine</code> object to provide the information related to
 * characters, their glyphs, offsets, and advances.
 */
public class ShapingResult implements Disposable {
    static {
        JniBridge.loadLibrary();
    }

    static final class Finalizable extends ShapingResult {
        Finalizable(@NonNull ShapingResult parent) {
            super(parent);
        }

        @Override
        public void dispose() {
            throw new UnsupportedOperationException(Constants.EXCEPTION_FINALIZABLE_OBJECT);
        }

        @Override
        protected void finalize() throws Throwable {
            try {
                super.dispose();
            } finally {
                super.finalize();
            }
        }
    }

    /**
     * Wraps a shaping result object into a finalizable instance which is guaranteed to be
     * disposed automatically by the GC when no longer in use. After calling this method,
     * <code>dispose()</code> should not be called on either original object or returned object.
     * Calling <code>dispose()</code> on returned object will throw an
     * <code>UnsupportedOperationException</code>.
     * <p>
     * <strong>Note:</strong> The behavior is undefined if the passed-in object is already disposed
     * or wrapped into another finalizable instance.
     *
     * @param shapingResult The shaping result object to wrap into a finalizable instance.
     * @return The finalizable instance of the passed-in shaping result object.
     */
    public static @NonNull ShapingResult finalizable(@NonNull ShapingResult shapingResult) {
        if (shapingResult.getClass() == ShapingResult.class) {
            return new Finalizable(shapingResult);
        }

        if (shapingResult.getClass() != Finalizable.class) {
            throw new IllegalArgumentException(Constants.EXCEPTION_SUBCLASS_NOT_SUPPORTED);
        }

        return shapingResult;
    }

    /**
     * Checks whether a shaping result object is finalizable or not.
     *
     * @param shapingResult The shaping result object to check.
     * @return <code>true</code> if the passed-in shaping result object is finalizable,
     *         <code>false</code> otherwise.
     */
    public static boolean isFinalizable(@NonNull ShapingResult shapingResult) {
        return (shapingResult.getClass() == Finalizable.class);
    }

	long nativeResult;

    /**
     * Constructs a shaping result object.
     */
	ShapingResult() {
	    nativeResult = nCreate();
	}

    ShapingResult(@NonNull ShapingResult other) {
        this.nativeResult = other.nativeResult;
    }

    /**
     * Returns <code>true</code> if the text flows backward for this <code>ShapingResult</code>
     * object.
     *
     * @return <code>true</code> if the text flows backward, <code>false</code> otherwise.
     */
	public boolean isBackward() {
	    return nIsBackward(nativeResult);
	}

	boolean isRTL() {
	    return nIsRTL(nativeResult);
    }

    /**
     * Returns the index to the first character in source text for this <code>ShapingResult</code>
     * object.
     *
     * @return The index to the first character in source text.
     */
	public int getCharStart() {
        return nGetCharStart(nativeResult);
    }

    /**
     * Returns the index after the last character in source text for this <code>ShapingResult</code>
     * object.
     *
     * @return The index after the last character in source text.
     */
    public int getCharEnd() {
        return nGetCharEnd(nativeResult);
    }

    private int getCharCount() {
        return nGetCharCount(nativeResult);
    }

    /**
     * Returns the number of glyphs in this <code>ShapingResult</code> object.
     *
     * @return The number of glyphs in this <code>ShapingResult</code> object.
     */
	public int getGlyphCount() {
		return nGetGlyphCount(nativeResult);
	}

	int getGlyphId(int index) {
	    return nGetGlyphId(nativeResult, index);
    }

    void copyGlyphIds(int offset, int length, @NonNull int[] destination, int index) {
	    nCopyGlyphIds(nativeResult, offset, length, destination, index);
    }

    static final class GlyphIdList extends IntList {
	    final @NonNull ShapingResult owner;
        final int offset;
        final int size;

        GlyphIdList(@NonNull ShapingResult owner) {
            this.owner = owner;
            this.offset = 0;
            this.size = owner.getGlyphCount();
        }

        private GlyphIdList(@NonNull ShapingResult owner, int offset, int size) {
            this.owner = owner;
            this.offset = offset;
            this.size = size;
        }

        @Override
        public int size() {
            return size;
        }

        @Override
        public int get(int index) {
            checkElementIndex(index, size);

            return owner.getGlyphId(index + offset);
        }

        @Override
        public void copyTo(@NonNull int[] array, int atIndex) {
            checkNotNull(array);
            checkArrayBounds(array, atIndex, size);

            owner.copyGlyphIds(offset, size, array, atIndex);
        }

        @Override
        public @NonNull IntList subList(int fromIndex, int toIndex) {
            checkIndexRange(fromIndex, toIndex, size);

            return new GlyphIdList(owner, offset + fromIndex, toIndex - fromIndex);
        }
    }

    /**
     * Returns a list of glyph IDs in this <code>ShapingResult</code> object.
     * <p>
     * <strong>Note:</strong> The returned list might exhibit undefined behavior if the
     * <code>ShapingResult</code> object is disposed.
     *
     * @return A list of glyph IDs.
     */
    public @NonNull IntList getGlyphIds() {
        return new GlyphIdList(this);
    }

    float getGlyphXOffset(int index) {
        return nGetGlyphXOffset(nativeResult, index);
    }

    float getGlyphYOffset(int index) {
        return nGetGlyphYOffset(nativeResult, index);
    }

    void copyGlyphOffsets(int offset, int length, @NonNull float[] destination, int index) {
        nCopyGlyphOffsets(nativeResult, offset, length, destination, index);
    }

    static final class GlyphOffsetList extends PointList {
        final @NonNull ShapingResult owner;
        final int offset;
        final int size;

        public GlyphOffsetList(@NonNull ShapingResult owner) {
            this.owner = owner;
            this.offset = 0;
            this.size = owner.getGlyphCount();
        }

        private GlyphOffsetList(@NonNull ShapingResult owner, int offset, int size) {
            this.owner = owner;
            this.offset = offset;
            this.size = size;
        }

        @Override
        public int size() {
            return size;
        }

        @Override
        public float getX(int index) {
            checkElementIndex(index, size);

            return owner.getGlyphXOffset(index + offset);
        }

        @Override
        public float getY(int index) {
            checkElementIndex(index, size);

            return owner.getGlyphYOffset(index + offset);
        }

        @Override
        public void copyTo(@NonNull float[] array, int atIndex) {
            checkNotNull(array);
            checkArrayBounds(array, atIndex, size * 2);

            owner.copyGlyphOffsets(offset, size, array, atIndex);
        }

        @Override
        public @NonNull PointList subList(int fromIndex, int toIndex) {
            checkIndexRange(fromIndex, toIndex, size);

            return new GlyphOffsetList(owner, offset + fromIndex, toIndex - fromIndex);
        }
    }

    /**
     * Returns a list of glyph offsets in this <code>ShapingResult</code> object.
     * <p>
     * <strong>Note:</strong> The returned list might exhibit undefined behavior if the
     * <code>ShapingResult</code> object is disposed.
     *
     * @return A list of glyph offsets.
     */
    public @NonNull PointList getGlyphOffsets() {
        return new GlyphOffsetList(this);
    }

    float getGlyphAdvance(int index) {
        return nGetGlyphAdvance(nativeResult, index);
    }

    void copyGlyphAdvances(int offset, int length, @NonNull float[] destination, int index) {
        nCopyGlyphAdvances(nativeResult, offset, length, destination, index);
    }

    static final class GlyphAdvanceList extends FloatList {
        final @NonNull ShapingResult owner;
        final int offset;
        final int size;

        public GlyphAdvanceList(@NonNull ShapingResult owner) {
            this.owner = owner;
            this.offset = 0;
            this.size = owner.getGlyphCount();
        }

        private GlyphAdvanceList(@NonNull ShapingResult owner, int offset, int size) {
            this.owner = owner;
            this.offset = offset;
            this.size = size;
        }

        @Override
        public int size() {
            return size;
        }

        @Override
        public float get(int index) {
            checkElementIndex(index, size);

            return owner.getGlyphAdvance(index + offset);
        }

        @Override
        public void copyTo(@NonNull float[] array, int atIndex) {
            checkNotNull(array);
            checkArrayBounds(array, atIndex, size);

            owner.copyGlyphAdvances(offset, size, array, atIndex);
        }

        @Override
        public @NonNull FloatList subList(int fromIndex, int toIndex) {
            checkIndexRange(fromIndex, toIndex, size);

            return new GlyphAdvanceList(owner, offset + fromIndex, toIndex - fromIndex);
        }
    }

    /**
     * Returns a list of glyph advances in this <code>ShapingResult</code> object.
     * <p>
     * <strong>Note:</strong> The returned list might exhibit undefined behavior if the
     * <code>ShapingResult</code> object is disposed.
     *
     * @return A list of glyph advances.
     */
    public @NonNull FloatList getGlyphAdvances() {
        return new GlyphAdvanceList(this);
    }

    static final class ClusterMap extends IntList {
        final @Nullable Object owner;
        final long pointer;
        final int size;

        public ClusterMap(@Nullable Object owner, long pointer, int size) {
            this.owner = owner;
            this.pointer = pointer;
            this.size = size;
        }

        @Override
        public int size() {
            return size;
        }

        @Override
        public int get(int index) {
            checkElementIndex(index, size);

            return Raw.getInt32Value(pointer + (index * Raw.INT32_SIZE));
        }

        @Override
        public void copyTo(@NonNull int[] array, int atIndex) {
            checkNotNull(array);
            checkArrayBounds(array, atIndex, size);

            for (int i = 0; i < size; i++) {
                array[i + atIndex] = Raw.getInt32Value(pointer + (i * Raw.INT32_SIZE));
            }
        }

        @Override
        public @NonNull IntList subList(int fromIndex, int toIndex) {
            checkIndexRange(fromIndex, toIndex, size);

            return new ClusterMap(owner, pointer + (fromIndex * Raw.INT32_SIZE), toIndex - fromIndex);
        }
    }

    /**
     * Returns a list of indexes, mapping each shaped character in source string to corresponding
     * glyph. The list might be empty if no glyph is produced.
     * <p>
     * The map is produced according to following rules.
     * <ul>
     *      <li>If a single character translates into multiple glyphs, then it maps to the first
     *          glyph in the sequence.</li>
     *      <li>If multiple characters form a group, such as a grapheme, which in turn translates
     *          into multiple glyphs, then each character maps to the first glyph in the
     *          sequence.</li>
     *      <li>If nonconsecutive characters translate to a single glyph or ligature, then each
     *          participating character, and all in-between characters, map to this glyph or
     *          ligature.</li>
     * </ul>
     * <p>
     * <strong>Note:</strong> The returned list might exhibit undefined behavior if the
     * <code>ShapingResult</code> object is disposed.
     *
     * @return A list of indexes, mapping each shaped character in source string to corresponding
     *         glyph.
     */
    public @NonNull IntList getClusterMap() {
        long pointer = nGetClusterMapPtr(nativeResult);
        int size = (pointer != 0 ? nGetCharCount(nativeResult) : 0);
        return new ClusterMap(this, pointer, size);
    }

    /**
     * Returns a list of caret edges having caret stop on every code unit.
     *
     * @return A list of caret edges having caret stop on every code unit.
     */
    public @NonNull FloatList getCaretEdges() {
        return getCaretEdges(null);
    }

    CaretEdgesBuilder createCaretEdgesBuilder() {
        return new CaretEdgesBuilder();
    }

    /**
     * Returns a list of caret edges.
     *
     * @param caretStops An array for caret stops of the code units represented by this object.
     * @return A list of caret edges.
     */
    public @NonNull FloatList getCaretEdges(@Nullable boolean[] caretStops) {
        int charCount = getCharCount();
        if (caretStops != null) {
            if (caretStops.length < charCount) {
                throw new IllegalArgumentException("The length of caret stops array must be at least the represented character count");
            }
        }

        return createCaretEdgesBuilder()
                .setBackward(isBackward())
                .setRTL(isRTL())
                .setGlyphAdvances(getGlyphAdvances())
                .setClusterMap(getClusterMap())
                .setCaretStops(caretStops)
                .build();
    }

	@Override
	public void dispose() {
        nDispose(nativeResult);
    }

    @Override
    public @NonNull String toString() {
        return "ShapingResult{isBackward=" + isBackward()
                + ", charStart=" + getCharStart()
                + ", charEnd=" + getCharEnd()
                + ", glyphCount=" + getGlyphCount()
                + ", glyphIds=" + getGlyphIds()
                + ", glyphOffsets=" + getGlyphOffsets()
                + ", glyphAdvances=" + getGlyphAdvances()
                + ", clusterMap=" + getClusterMap()
                + "}";
    }

	private static native long nCreate();
	private static native void nDispose(long nativeResult);

	private static native boolean nIsBackward(long nativeResult);
    private static native boolean nIsRTL(long nativeResult);
    private static native float nGetSizeByEm(long nativeResult);
	private static native int nGetCharStart(long nativeResult);
	private static native int nGetCharEnd(long nativeResult);
    private static native int nGetCharCount(long nativeResult);
	private static native int nGetGlyphCount(long nativeResult);

    private static native int nGetGlyphId(long nativeResult, int index);
    private static native float nGetGlyphXOffset(long nativeResult, int index);
    private static native float nGetGlyphYOffset(long nativeResult, int index);
    private static native float nGetGlyphAdvance(long nativeResult, int index);
    private static native long nGetClusterMapPtr(long nativeResult);

    private static native void nCopyGlyphIds(long nativeResult, int offset, int length, @NonNull int[] destination, int index);
    private static native void nCopyGlyphOffsets(long nativeResult, int offset, int length, @NonNull float[] destination, int index);
    private static native void nCopyGlyphAdvances(long nativeResult, int offset, int length, @NonNull float[] destination, int index);
}
